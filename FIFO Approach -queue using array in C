#Using FIFO Approach
#include<stdio.h>  
#include<stdlib.h>  
#define MAX 10               
int queue [ MAX ] ;            //Declaration of Array  
int front = -1 , rear = -1 ;  
void enqueue () ;  
int dequeue () ;  
int peek () ;  
void display () ;  
  
void main()  
{  
    int choice , data ;  
    while ( 1 )  
    {  
        printf ( " \n \n ***************** Menu ******************** \n " ) ;  
        printf ( " 1. Insert the element \n " ) ;  
        printf ( " 2. Delete the element \n " ) ;  
        printf ( " 3. Peek value on queue \n " ) ;  
        printf ( " 4. Display Queue \n " ) ;  
        printf ( " 5. Exit \n " ) ;  
        printf ( " Enter your choice -> " ) ;  
        scanf ( "%d" , &choice ) ;  
          
        switch ( choice )  
        {  
            case 1 :  
                enqueue () ;  
                break ;  
            case 2 :  
                data = dequeue () ;  
                if ( data != -1 )  
                printf ( " \n The data element popped out from queue is -> %d " , data ) ;  
                break ;  
            case 3 :  
                data = peek () ;  
                if ( data != -1 )  
                printf ( " \n The first value in queue is -> %d " , data ) ;  
                break ;  
            case 4 :  
                display () ;  
                break ;  
            case 5 :  
                exit ( 0 ) ;  
                break ;  
            default :  
                printf ( " \n Choice not available \n " ) ;       
        }     
    }  
}  
void enqueue ()  
{  
    int val ;  
    printf ( " Enter data to insert in queue -> " ) ;  
    scanf ( "%d" , &val ) ;  
    if ( rear == MAX - 1 )  
    {  
        printf ( " Overflow Condition " ) ;  
    }  
    else   
    {  
    if ( front == -1 )  
    {  
        front = 0 ;  
    }  
        rear = rear + 1 ;  
        queue [ rear ] = val ;  
          
    }  
}  
int dequeue ()  
{  
    int val ;  
    if ( front == -1 || rear < front )  
    {  
        printf ( " \n Underflow condition " ) ;  
        return -1 ;  
    }  
    else  
    {  
        val = queue [ front ] ;  
        front = front + 1 ;  
        if ( front > rear )  
        {  
            front = rear = -1 ;  
        }  
        return val ;  
    }  
}  
int peek ()  
{  
    if ( front == -1 || rear < front )  
    {  
        printf ( " \n Queue is empty " ) ;  
        return -1 ;  
    }  
    else  
    {  
        return queue [ front ] ;  
    }     
}  
void display()  
{  
    int i ;  
    printf ( " \n " ) ;  
    if ( front == -1 || front > rear )  
    {  
    printf ( " \n Queue is empty " ) ;  
    }  
    else  
    {  
        for ( i = front ; i <= rear ; i++ )  
        {  
            printf ( " %d \n " , queue [ i ] ) ;  
        }  
    }  
}  
